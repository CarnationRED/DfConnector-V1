<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed Mar 29 09:12:56 2023
<BR><P>
<H3>Maximum Stack Usage =        280 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; EXTI4_IRQHandler &rArr; vci_ctl_recv &rArr; vci_can_init &rArr; can_config &rArr; can_clear_filter &rArr; can_set_id_filter_standard &rArr; can_struct_para_init
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[5d]">M8266WIFI_SPI_Interface_Communication_Stress_Test</a>
 <LI><a href="#[5e]">M8266WIFI_SPI_Send_Data</a>
 <LI><a href="#[60]">M8266WIFI_SPI_Send_Udp_Data</a>
 <LI><a href="#[61]">M8266WIFI_SPI_Send_Data_to_TcpClient</a>
 <LI><a href="#[62]">M8266WIFI_SPI_StartModuleSmartConfig</a>
 <LI><a href="#[6d]">M8266HostIf_SPI_Select</a>
 <LI><a href="#[6f]">M8266WIFI_SPI_Config_AP</a>
 <LI><a href="#[70]">M8266WIFI_SPI_Config_Tcp_Window_num</a>
 <LI><a href="#[71]">M8266WIFI_SPI_Delete_Connection</a>
 <LI><a href="#[6e]">M8266WIFI_SPI_Get_Module_Info</a>
 <LI><a href="#[72]">M8266WIFI_SPI_Get_Opmode</a>
 <LI><a href="#[6a]">M8266WIFI_SPI_Has_DataReceived</a>
 <LI><a href="#[67]">M8266WIFI_SPI_Query_Connection</a>
 <LI><a href="#[73]">M8266WIFI_SPI_RecvData</a>
 <LI><a href="#[64]">M8266WIFI_SPI_STA_Get_HostIP_by_HostName</a>
 <LI><a href="#[74]">M8266WIFI_SPI_Set_Opmode</a>
 <LI><a href="#[75]">M8266WIFI_SPI_Setup_Connection</a>
 <LI><a href="#[4f]">M8266WIFI_SPI_ffwsbza</a>
 <LI><a href="#[51]">M8266WIFI_SPI_hjdxctmm</a>
 <LI><a href="#[52]">M8266WIFI_SPI_szbcxstf</a>
 <LI><a href="#[54]">M8266WIFI_SPI_ssut</a>
 <LI><a href="#[55]">M8266WIFI_SPI_wscbf</a>
 <LI><a href="#[56]">M8266WIFI_SPI_twsfad</a>
 <LI><a href="#[57]">M8266WIFI_SPI_pirouaw</a>
 <LI><a href="#[58]">M8266WIFI_SPI_gbcwzsrf.constprop.38</a>
 <LI><a href="#[5a]">fvcp.constprop.39</a>
 <LI><a href="#[59]">fvdnstap</a>
 <LI><a href="#[5b]">M8266WIFI_SPI_skbldxsjxe</a>
 <LI><a href="#[5c]">M8266WIFI_SPI_ssmd</a>
 <LI><a href="#[6c]">M8266WIFI_SPI_sptdt</a>
 <LI><a href="#[65]">M8266WIFI_SPI_qacal</a>
 <LI><a href="#[6b]">M8266WIFI_SPI_capstp</a>
 <LI><a href="#[68]">M8266WIFI_SPI_ctpsp</a>
 <LI><a href="#[69]">M8266WIFI_SPI_xhjrlbedv.isra.16.constprop.36</a>
 <LI><a href="#[5f]">M8266WIFI_SPI_sdfal</a>
 <LI><a href="#[66]">M8266WIFI_SPI_dlodc</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC0_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC0_1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC0_1_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from gd32c10x_it.o(i.BusFault_Handler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[20]">CAN0_EWMC_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[1e]">CAN0_RX0_IRQHandler</a> from gd32c10x_it.o(i.CAN0_RX0_IRQHandler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[1f]">CAN0_RX1_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[1d]">CAN0_TX_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[48]">CAN1_EWMC_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[46]">CAN1_RX0_IRQHandler</a> from gd32c10x_it.o(i.CAN1_RX0_IRQHandler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[47]">CAN1_RX1_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[45]">CAN1_TX_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[15]">DMA0_Channel0_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[16]">DMA0_Channel1_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[17]">DMA0_Channel2_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[18]">DMA0_Channel3_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[19]">DMA0_Channel4_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[1a]">DMA0_Channel5_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[1b]">DMA0_Channel6_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[40]">DMA1_Channel0_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[41]">DMA1_Channel1_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[42]">DMA1_Channel2_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[43]">DMA1_Channel3_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[44]">DMA1_Channel4_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from gd32c10x_it.o(i.DebugMon_Handler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[39]">EXMC_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[32]">EXTI10_15_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from gd32c10x_it.o(i.EXTI4_IRQHandler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[21]">EXTI5_9_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[e]">FMC_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from gd32c10x_it.o(i.HardFault_Handler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[2a]">I2C0_ER_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[29]">I2C0_EV_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[2c]">I2C1_ER_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[2b]">I2C1_EV_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[b]">LVD_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from gd32c10x_it.o(i.MemManage_Handler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from gd32c10x_it.o(i.NMI_Handler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from gd32c10x_it.o(i.PendSV_Handler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[f]">RCU_CTC_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[2d]">SPI0_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[3b]">SPI2_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from gd32c10x_it.o(i.SVC_Handler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from gd32c10x_it.o(i.SysTick_Handler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[4b]">SystemInit</a> from system_gd32c10x.o(i.SystemInit) referenced from startup_gd32c10x.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[22]">TIMER0_BRK_TIMER8_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[25]">TIMER0_Channel_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[24]">TIMER0_TRG_CMT_TIMER10_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[23]">TIMER0_UP_TIMER9_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[26]">TIMER1_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[27]">TIMER2_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[28]">TIMER3_IRQHandler</a> from gd32c10x_it.o(i.TIMER3_IRQHandler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[3a]">TIMER4_IRQHandler</a> from gd32c10x_it.o(i.TIMER4_IRQHandler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[3e]">TIMER5_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[3f]">TIMER6_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[35]">TIMER7_BRK_TIMER11_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[38]">TIMER7_Channel_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[37]">TIMER7_TRG_CMT_TIMER13_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[36]">TIMER7_UP_TIMER12_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[3c]">UART3_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[3d]">UART4_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[2f]">USART0_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[30]">USART1_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[49]">USBFS_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[34]">USBFS_WKUP_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from gd32c10x_it.o(i.UsageFault_Handler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[a]">WWDGT_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[4c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32c10x.o(.text)
 <LI><a href="#[4a]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(.text)
</UL>
<P><STRONG><a name="[eb]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[4d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[63]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ec]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[ed]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[ee]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[ef]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[f0]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[f1]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>CAN1_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCU_CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIMER0_BRK_TIMER8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIMER0_TRG_CMT_TIMER10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIMER0_UP_TIMER9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIMER5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIMER7_BRK_TIMER11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIMER7_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIMER7_TRG_CMT_TIMER13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIMER7_UP_TIMER12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>USBFS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBFS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>M8266WIFI_SPI_Interface_Communication_Stress_Test</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F2xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvdnstap
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_hjdxctmm
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ffwsbza
</UL>

<P><STRONG><a name="[5e]"></a>M8266WIFI_SPI_Send_Data</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_Send_Data &rArr; M8266WIFI_SPI_sdfal &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_SendData
</UL>

<P><STRONG><a name="[60]"></a>M8266WIFI_SPI_Send_Udp_Data</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F2xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvdnstap
</UL>

<P><STRONG><a name="[61]"></a>M8266WIFI_SPI_Send_Data_to_TcpClient</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F2xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvdnstap
</UL>

<P><STRONG><a name="[62]"></a>M8266WIFI_SPI_StartModuleSmartConfig</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F2xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_skbldxsjxe
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_gbcwzsrf.constprop.38
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_szbcxstf
</UL>

<P><STRONG><a name="[f2]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_cmd_send2can
</UL>

<P><STRONG><a name="[f3]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[f4]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>M8266HostIf_SPI_Select</STRONG> (Thumb, 248 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F2xx.o(.text.M8266HostIf_SPI_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = M8266HostIf_SPI_Select &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Module_Info
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssmd
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvcp.constprop.39
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Init
</UL>

<P><STRONG><a name="[6f]"></a>M8266WIFI_SPI_Config_AP</STRONG> (Thumb, 404 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F2xx.o(.text.M8266WIFI_SPI_Config_AP))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_Config_AP &rArr; M8266WIFI_SPI_capstp &rArr; M8266WIFI_SPI_skbldxsjxe &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_capstp
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_skbldxsjxe
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvdnstap
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_gbcwzsrf.constprop.38
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_szbcxstf
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ffwsbza
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Init
</UL>

<P><STRONG><a name="[70]"></a>M8266WIFI_SPI_Config_Tcp_Window_num</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F2xx.o(.text.M8266WIFI_SPI_Config_Tcp_Window_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_Config_Tcp_Window_num &rArr; M8266WIFI_SPI_ctpsp &rArr; M8266WIFI_SPI_skbldxsjxe &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ctpsp
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_SetupTCPServer
</UL>

<P><STRONG><a name="[71]"></a>M8266WIFI_SPI_Delete_Connection</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F2xx.o(.text.M8266WIFI_SPI_Delete_Connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_Delete_Connection &rArr; M8266WIFI_SPI_dlodc &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_dlodc
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
</UL>

<P><STRONG><a name="[6e]"></a>M8266WIFI_SPI_Get_Module_Info</STRONG> (Thumb, 158 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F2xx.o(.text.M8266WIFI_SPI_Get_Module_Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_Get_Module_Info &rArr; M8266WIFI_SPI_skbldxsjxe &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_skbldxsjxe
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_gbcwzsrf.constprop.38
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_szbcxstf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_Select
</UL>

<P><STRONG><a name="[72]"></a>M8266WIFI_SPI_Get_Opmode</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F2xx.o(.text.M8266WIFI_SPI_Get_Opmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_Get_Opmode &rArr; M8266WIFI_SPI_skbldxsjxe &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_skbldxsjxe
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_gbcwzsrf.constprop.38
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_szbcxstf
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Init
</UL>

<P><STRONG><a name="[6a]"></a>M8266WIFI_SPI_Has_DataReceived</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F2xx.o(.text.M8266WIFI_SPI_Has_DataReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_Has_DataReceived &rArr; M8266WIFI_SPI_ffwsbza &rArr; M8266HostIf_Set_SPI_nCS_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ffwsbza
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_firmware_upgrade
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_xhjrlbedv.isra.16.constprop.36
</UL>

<P><STRONG><a name="[67]"></a>M8266WIFI_SPI_Query_Connection</STRONG> (Thumb, 210 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F2xx.o(.text.M8266WIFI_SPI_Query_Connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_Query_Connection &rArr; M8266WIFI_SPI_skbldxsjxe &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_skbldxsjxe
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_gbcwzsrf.constprop.38
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_szbcxstf
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_GetClients
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_dlodc
</UL>

<P><STRONG><a name="[73]"></a>M8266WIFI_SPI_RecvData</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F2xx.o(.text.M8266WIFI_SPI_RecvData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_RecvData &rArr; M8266WIFI_SPI_xhjrlbedv.isra.16.constprop.36 &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_xhjrlbedv.isra.16.constprop.36
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_firmware_upgrade
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_cmd_recv_iterate
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[64]"></a>M8266WIFI_SPI_STA_Get_HostIP_by_HostName</STRONG> (Thumb, 668 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F2xx.o(.text.M8266WIFI_SPI_STA_Get_HostIP_by_HostName))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_STA_Get_HostIP_by_HostName &rArr; M8266WIFI_SPI_sptdt &rArr; M8266WIFI_SPI_skbldxsjxe &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sptdt
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_skbldxsjxe
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvdnstap
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_gbcwzsrf.constprop.38
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_szbcxstf
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ffwsbza
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
</UL>

<P><STRONG><a name="[74]"></a>M8266WIFI_SPI_Set_Opmode</STRONG> (Thumb, 126 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F2xx.o(.text.M8266WIFI_SPI_Set_Opmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_Set_Opmode &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_skbldxsjxe
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_gbcwzsrf.constprop.38
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_szbcxstf
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Init
</UL>

<P><STRONG><a name="[75]"></a>M8266WIFI_SPI_Setup_Connection</STRONG> (Thumb, 552 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F2xx.o(.text.M8266WIFI_SPI_Setup_Connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_Setup_Connection &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Query_Connection
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Delete_Connection
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Get_HostIP_by_HostName
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_skbldxsjxe
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvdnstap
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvcp.constprop.39
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_gbcwzsrf.constprop.38
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_szbcxstf
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ffwsbza
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_SetupTCPServer
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32c10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN0_RX0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32c10x_it.o(i.CAN0_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CAN0_RX0_IRQHandler &rArr; can_msg_recv &rArr; can_message_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_msg_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32c10x_it.o(i.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; can_msg_recv &rArr; can_message_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_msg_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32c10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, gd32c10x_it.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = EXTI4_IRQHandler &rArr; vci_ctl_recv &rArr; vci_can_init &rArr; can_config &rArr; can_clear_filter &rArr; can_set_id_filter_standard &rArr; can_struct_para_init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vci_ctl_recv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_cmd_recv
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_RecvData
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Has_DataReceived
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_heartbeat_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32c10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>M8266HostIf_SPI_ReadWriteByte</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, m8266wifidrv.o(i.M8266HostIf_SPI_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = M8266HostIf_SPI_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Init
</UL>

<P><STRONG><a name="[50]"></a>M8266HostIf_Set_SPI_nCS_Pin</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, m8266wifidrv.o(i.M8266HostIf_Set_SPI_nCS_Pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = M8266HostIf_Set_SPI_nCS_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_pirouaw
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssut
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_hjdxctmm
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ffwsbza
</UL>

<P><STRONG><a name="[53]"></a>M8266HostIf_delay_us</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, m8266wifidrv.o(i.M8266HostIf_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Set_Opmode
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_Select
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Interface_Communication_Stress_Test
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_dlodc
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_xhjrlbedv.isra.16.constprop.36
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_skbldxsjxe
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_gbcwzsrf.constprop.38
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_twsfad
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_szbcxstf
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32c10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32c10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32c10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32c10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32c10x_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SystemInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, system_gd32c10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(.text)
</UL>
<P><STRONG><a name="[28]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32c10x_it.o(i.TIMER3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER3_IRQHandler &rArr; tim3_it
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim3_it
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32c10x_it.o(i.TIMER4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER4_IRQHandler &rArr; tim4_it
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim4_it
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32c10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[f7]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[f8]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[f9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[c4]"></a>beep</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, buzzer.o(i.beep))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = beep
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_firmware_upgrade
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>beep_setvolume</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, buzzer.o(i.beep_setvolume))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_firmware_upgrade
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>bsp_board_config</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, main.o(i.bsp_board_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bsp_board_config &rArr; gpio_pin_remap_config
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>buzz_config</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, main.o(i.buzz_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = buzz_config &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_struct_para_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_primary_output_config
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_struct_para_init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_shadow_config
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_mode_config
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_config
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_disable
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>buzzer_tick</STRONG> (Thumb, 218 bytes, Stack size 0 bytes, buzzer.o(i.buzzer_tick))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim4_it
</UL>

<P><STRONG><a name="[cf]"></a>buzzer_wait_until_idle</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, buzzer.o(i.buzzer_wait_until_idle))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>can1_filter_start_bank</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, gd32c10x_can.o(i.can1_filter_start_bank))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[96]"></a>can_clear_filter</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, main.o(i.can_clear_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = can_clear_filter &rArr; can_set_id_filter_standard &rArr; can_struct_para_init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set_id_filter_standard
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set_id_filter_extended
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vci_ctl_recv
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[78]"></a>can_cmd_recv</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, messages.o(i.can_cmd_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = can_cmd_recv &rArr; can_cmd_recv_iterate &rArr; M8266WIFI_SPI_RecvData &rArr; M8266WIFI_SPI_xhjrlbedv.isra.16.constprop.36 &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_cmd_recv_iterate
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[99]"></a>can_cmd_recv_iterate</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, messages.o(i.can_cmd_recv_iterate))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = can_cmd_recv_iterate &rArr; M8266WIFI_SPI_RecvData &rArr; M8266WIFI_SPI_xhjrlbedv.isra.16.constprop.36 &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_RecvData
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_cmd_recv
</UL>

<P><STRONG><a name="[9b]"></a>can_cmd_send2can</STRONG> (Thumb, 114 bytes, Stack size 96 bytes, messages.o(i.can_cmd_send2can))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = can_cmd_send2can &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_transmit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_can_channel
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9f]"></a>can_config</STRONG> (Thumb, 326 bytes, Stack size 48 bytes, main.o(i.can_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = can_config &rArr; can_clear_filter &rArr; can_set_id_filter_standard &rArr; can_struct_para_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_struct_para_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_enable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_frequency_set
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_fd_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_fd_frequency_set
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_filter_start_bank
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_led
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_clear_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vci_can_init
</UL>

<P><STRONG><a name="[a1]"></a>can_deinit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gd32c10x_can.o(i.can_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vci_can_stop
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[a6]"></a>can_fd_frequency_set</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gd32c10x_can.o(i.can_fd_frequency_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = can_fd_frequency_set &rArr; can_working_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_working_mode_set
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_can_fd_baudrate_set
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[a5]"></a>can_fd_init</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, gd32c10x_can.o(i.can_fd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_fd_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[b6]"></a>can_filter_init</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, gd32c10x_can.o(i.can_filter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_filter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set_id_filter_standard
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set_id_filter_extended
</UL>

<P><STRONG><a name="[a3]"></a>can_frequency_set</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, gd32c10x_can.o(i.can_frequency_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = can_frequency_set &rArr; can_working_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_working_mode_set
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_can_baudrate_set
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[af]"></a>can_gpio_config</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, main.o(i.can_gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = can_gpio_config &rArr; gpio_pin_remap_config
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vci_can_init
</UL>

<P><STRONG><a name="[a2]"></a>can_init</STRONG> (Thumb, 420 bytes, Stack size 20 bytes, gd32c10x_can.o(i.can_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = can_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[a9]"></a>can_interrupt_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32c10x_can.o(i.can_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[b3]"></a>can_message_receive</STRONG> (Thumb, 448 bytes, Stack size 24 bytes, gd32c10x_can.o(i.can_message_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = can_message_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_msg_recv
</UL>

<P><STRONG><a name="[9e]"></a>can_message_transmit</STRONG> (Thumb, 620 bytes, Stack size 28 bytes, gd32c10x_can.o(i.can_message_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = can_message_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_cmd_send2can
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>can_msg_buffer_clear</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, messages.o(i.can_msg_buffer_clear))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vci_ctl_recv
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_init
</UL>

<P><STRONG><a name="[76]"></a>can_msg_recv</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, messages.o(i.can_msg_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = can_msg_recv &rArr; can_message_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_receive
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim3_slow
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim3_normal
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_time01ms
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_RX0_IRQHandler
</UL>

<P><STRONG><a name="[b5]"></a>can_msg_send2wifi</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, messages.o(i.can_msg_send2wifi))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = can_msg_send2wifi &rArr; wifi_SendData &rArr; M8266WIFI_SPI_Send_Data &rArr; M8266WIFI_SPI_sdfal &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>can_set_id_filter_extended</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, main.o(i.can_set_id_filter_extended))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = can_set_id_filter_extended &rArr; can_struct_para_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_struct_para_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_filter
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_clear_filter
</UL>

<P><STRONG><a name="[98]"></a>can_set_id_filter_standard</STRONG> (Thumb, 140 bytes, Stack size 56 bytes, main.o(i.can_set_id_filter_standard))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = can_set_id_filter_standard &rArr; can_struct_para_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_struct_para_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_filter
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_clear_filter
</UL>

<P><STRONG><a name="[a0]"></a>can_struct_para_init</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, gd32c10x_can.o(i.can_struct_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_struct_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set_id_filter_standard
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set_id_filter_extended
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[ac]"></a>can_working_mode_set</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, gd32c10x_can.o(i.can_working_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_working_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_frequency_set
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_fd_frequency_set
</UL>

<P><STRONG><a name="[d2]"></a>clear_heartbeat_pending</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, delay.o(i.clear_heartbeat_pending))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>clear_heartbeat_timeout</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, delay.o(i.clear_heartbeat_timeout))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>current_time01ms</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, delay.o(i.current_time01ms))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_msg_recv
</UL>

<P><STRONG><a name="[b8]"></a>current_totaltick</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, delay.o(i.current_totaltick))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[b7]"></a>delay_ms</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_totaltick
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_firmware_upgrade
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Module_Hardware_Reset
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reset
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>delay_us</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_totaltick
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_led
</UL>

<P><STRONG><a name="[b9]"></a>device_firmware_upgrade</STRONG> (Thumb, 504 bytes, Stack size 40 bytes, vci.o(i.device_firmware_upgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = device_firmware_upgrade &rArr; wifi_SendData &rArr; M8266WIFI_SPI_Send_Data &rArr; M8266WIFI_SPI_sdfal &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_enableIT
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_disableIT
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_RecvData
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Has_DataReceived
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_SendData
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_setvolume
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vci_status
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vci_status
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vci_ctl_recv
</UL>

<P><STRONG><a name="[a4]"></a>err_led</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(i.err_led))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = err_led &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[e8]"></a>exti_init</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, gd32c10x_exti.o(i.exti_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = exti_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init_it
</UL>

<P><STRONG><a name="[77]"></a>exti_interrupt_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32c10x_exti.o(i.exti_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init_it
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>fmc_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32c10x_fmc.o(i.fmc_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_firmware_upgrade
</UL>

<P><STRONG><a name="[bd]"></a>fmc_lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32c10x_fmc.o(i.fmc_lock))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_firmware_upgrade
</UL>

<P><STRONG><a name="[c1]"></a>fmc_page_erase</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, gd32c10x_fmc.o(i.fmc_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fmc_page_erase &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_firmware_upgrade
</UL>

<P><STRONG><a name="[c0]"></a>fmc_unlock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32c10x_fmc.o(i.fmc_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_firmware_upgrade
</UL>

<P><STRONG><a name="[c2]"></a>fmc_word_program</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gd32c10x_fmc.o(i.fmc_word_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fmc_word_program &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_firmware_upgrade
</UL>

<P><STRONG><a name="[bb]"></a>get_vci_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.get_vci_status))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_firmware_upgrade
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>gpio_bit_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32c10x_gpio.o(i.gpio_bit_reset))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_spi_init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_can_channel
</UL>

<P><STRONG><a name="[b0]"></a>gpio_bit_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32c10x_gpio.o(i.gpio_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_spi_init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_can_channel
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_gpio_config
</UL>

<P><STRONG><a name="[7f]"></a>gpio_bit_write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32c10x_gpio.o(i.gpio_bit_write))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Set_SPI_nCS_Pin
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Module_Hardware_Reset
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim3_it
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reset
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_led
</UL>

<P><STRONG><a name="[e7]"></a>gpio_exti_source_select</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, gd32c10x_gpio.o(i.gpio_exti_source_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_exti_source_select
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init_it
</UL>

<P><STRONG><a name="[89]"></a>gpio_init</STRONG> (Thumb, 188 bytes, Stack size 20 bytes, gd32c10x_gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_spi_init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init_it
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_gpio_config
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzz_config
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_config
</UL>

<P><STRONG><a name="[df]"></a>gpio_output_bit_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32c10x_gpio.o(i.gpio_output_bit_get))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim3_it
</UL>

<P><STRONG><a name="[88]"></a>gpio_pin_remap_config</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, gd32c10x_gpio.o(i.gpio_pin_remap_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_pin_remap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_gpio_config
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_config
</UL>

<P><STRONG><a name="[d1]"></a>heartbeat_pending</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, delay.o(i.heartbeat_pending))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d0]"></a>heartbeat_timeout</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, delay.o(i.heartbeat_timeout))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>main</STRONG> (Thumb, 612 bytes, Stack size 96 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = main &rArr; EXTI4_IRQHandler &rArr; vci_ctl_recv &rArr; vci_can_init &rArr; can_config &rArr; can_clear_filter &rArr; can_set_id_filter_standard &rArr; can_struct_para_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reset
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_SetupTCPServer
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_SendData
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_GetClients
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim4_config
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim3_config
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeat_timeout
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeat_pending
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_heartbeat_timeout
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_heartbeat_pending
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_struct_para_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_msg_send2wifi
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_transmit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_cmd_send2can
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_filter_start_bank
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_wait_until_idle
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_setvolume
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vci_can_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vci_status
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vci_status
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set_id_filter_standard
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzz_config
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[d4]"></a>nvic_config</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, delay.o(i.nvic_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nvic_config &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim4_config
</UL>

<P><STRONG><a name="[d5]"></a>nvic_config_tim3</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, delay.o(i.nvic_config_tim3))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nvic_config_tim3 &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim3_config
</UL>

<P><STRONG><a name="[e2]"></a>nvic_irq_disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32c10x_misc.o(i.nvic_irq_disable))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init_it
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_disableIT
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vci_can_stop
</UL>

<P><STRONG><a name="[a8]"></a>nvic_irq_enable</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, gd32c10x_misc.o(i.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_config_tim3
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_config
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init_it
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_enableIT
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[c8]"></a>nvic_priority_group_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32c10x_misc.o(i.nvic_priority_group_set))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>nvic_vector_table_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32c10x_misc.o(i.nvic_vector_table_set))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c7]"></a>params_init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, main.o(i.params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = params_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_msg_buffer_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32c10x_rcu.o(i.rcu_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_spi_init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init_it
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim4_config
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim3_config
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_gpio_config
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzz_config
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_config
</UL>

<P><STRONG><a name="[ab]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32c10x_rcu.o(i.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_deinit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
</UL>

<P><STRONG><a name="[aa]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32c10x_rcu.o(i.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_deinit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
</UL>

<P><STRONG><a name="[d7]"></a>recv</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, vci.o(i.recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = recv &rArr; M8266WIFI_SPI_RecvData &rArr; M8266WIFI_SPI_xhjrlbedv.isra.16.constprop.36 &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_RecvData
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_filter
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_channel
</UL>

<P><STRONG><a name="[9d]"></a>set_can_channel</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, main.o(i.set_can_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_can_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_channel
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_cmd_send2can
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vci_can_init
</UL>

<P><STRONG><a name="[d9]"></a>set_channel</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, vci.o(i.set_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = set_channel &rArr; recv &rArr; M8266WIFI_SPI_RecvData &rArr; M8266WIFI_SPI_xhjrlbedv.isra.16.constprop.36 &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_can_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vci_ctl_recv
</UL>

<P><STRONG><a name="[da]"></a>set_filter</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, vci.o(i.set_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = set_filter &rArr; can_set_id_filter_standard &rArr; can_struct_para_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set_id_filter_standard
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set_id_filter_extended
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vci_ctl_recv
</UL>

<P><STRONG><a name="[bc]"></a>set_vci_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.set_vci_status))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_firmware_upgrade
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vci_ctl_recv
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>setting</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, vci.o(i.setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = setting &rArr; recv &rArr; M8266WIFI_SPI_RecvData &rArr; M8266WIFI_SPI_xhjrlbedv.isra.16.constprop.36 &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vci_ctl_recv
</UL>

<P><STRONG><a name="[ea]"></a>spi_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32c10x_spi.o(i.spi_enable))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_spi_init
</UL>

<P><STRONG><a name="[7e]"></a>spi_i2s_data_receive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32c10x_spi.o(i.spi_i2s_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_ReadWriteByte
</UL>

<P><STRONG><a name="[7d]"></a>spi_i2s_data_transmit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32c10x_spi.o(i.spi_i2s_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_ReadWriteByte
</UL>

<P><STRONG><a name="[dc]"></a>spi_i2s_deinit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, gd32c10x_spi.o(i.spi_i2s_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_i2s_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_spi_init
</UL>

<P><STRONG><a name="[7c]"></a>spi_i2s_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32c10x_spi.o(i.spi_i2s_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_ReadWriteByte
</UL>

<P><STRONG><a name="[e9]"></a>spi_init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gd32c10x_spi.o(i.spi_init))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_spi_init
</UL>

<P><STRONG><a name="[ca]"></a>tim3_config</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, delay.o(i.tim3_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tim3_config &rArr; nvic_config_tim3 &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_config_tim3
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_struct_para_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>tim3_it</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, delay.o(i.tim3_it))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tim3_it
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_bit_get
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
</UL>

<P><STRONG><a name="[b4]"></a>tim3_normal</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, delay.o(i.tim3_normal))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_msg_recv
</UL>

<P><STRONG><a name="[b1]"></a>tim3_slow</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, delay.o(i.tim3_slow))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_msg_recv
</UL>

<P><STRONG><a name="[c9]"></a>tim4_config</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, delay.o(i.tim4_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tim4_config &rArr; nvic_config &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_config
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_struct_para_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>tim4_it</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, delay.o(i.tim4_it))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tim4_it
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_IRQHandler
</UL>

<P><STRONG><a name="[94]"></a>timer_auto_reload_shadow_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32c10x_timer.o(i.timer_auto_reload_shadow_disable))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzz_config
</UL>

<P><STRONG><a name="[8f]"></a>timer_channel_output_config</STRONG> (Thumb, 484 bytes, Stack size 8 bytes, gd32c10x_timer.o(i.timer_channel_output_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_channel_output_config
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzz_config
</UL>

<P><STRONG><a name="[91]"></a>timer_channel_output_mode_config</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, gd32c10x_timer.o(i.timer_channel_output_mode_config))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzz_config
</UL>

<P><STRONG><a name="[90]"></a>timer_channel_output_pulse_value_config</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gd32c10x_timer.o(i.timer_channel_output_pulse_value_config))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzz_config
</UL>

<P><STRONG><a name="[92]"></a>timer_channel_output_shadow_config</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, gd32c10x_timer.o(i.timer_channel_output_shadow_config))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzz_config
</UL>

<P><STRONG><a name="[8e]"></a>timer_channel_output_struct_para_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32c10x_timer.o(i.timer_channel_output_struct_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzz_config
</UL>

<P><STRONG><a name="[8b]"></a>timer_deinit</STRONG> (Thumb, 374 bytes, Stack size 8 bytes, gd32c10x_timer.o(i.timer_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim4_config
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim3_config
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzz_config
</UL>

<P><STRONG><a name="[95]"></a>timer_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32c10x_timer.o(i.timer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim4_config
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim3_config
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzz_config
</UL>

<P><STRONG><a name="[8d]"></a>timer_init</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, gd32c10x_timer.o(i.timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim4_config
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim3_config
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzz_config
</UL>

<P><STRONG><a name="[de]"></a>timer_interrupt_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32c10x_timer.o(i.timer_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim4_config
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim3_config
</UL>

<P><STRONG><a name="[84]"></a>timer_interrupt_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32c10x_timer.o(i.timer_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim4_config
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim3_config
</UL>

<P><STRONG><a name="[93]"></a>timer_primary_output_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32c10x_timer.o(i.timer_primary_output_config))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzz_config
</UL>

<P><STRONG><a name="[8c]"></a>timer_struct_para_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32c10x_timer.o(i.timer_struct_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim4_config
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim3_config
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzz_config
</UL>

<P><STRONG><a name="[cb]"></a>vci_can_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.vci_can_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vci_can_init &rArr; can_config &rArr; can_clear_filter &rArr; can_set_id_filter_standard &rArr; can_struct_para_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_can_channel
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_gpio_config
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vci_ctl_recv
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e1]"></a>vci_can_stop</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.vci_can_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vci_can_stop &rArr; can_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_disable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vci_ctl_recv
</UL>

<P><STRONG><a name="[79]"></a>vci_ctl_recv</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, vci.o(i.vci_ctl_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = vci_ctl_recv &rArr; vci_can_init &rArr; can_config &rArr; can_clear_filter &rArr; can_set_id_filter_standard &rArr; can_struct_para_init
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_filter
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_channel
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_firmware_upgrade
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_SendData
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_msg_buffer_clear
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vci_can_stop
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vci_can_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vci_status
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_clear_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[ce]"></a>wifi_GetClients</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, wifi.o(i.wifi_GetClients))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = wifi_GetClients &rArr; M8266WIFI_SPI_Query_Connection &rArr; M8266WIFI_SPI_skbldxsjxe &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Query_Connection
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>wifi_Init</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, wifi.o(i.wifi_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = wifi_Init &rArr; wifi_spi_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Set_Opmode
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Opmode
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Config_AP
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Set_SPI_nCS_Pin
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_Select
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_ReadWriteByte
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_spi_init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init_it
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Module_Hardware_Reset
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToHex
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>wifi_Module_Hardware_Reset</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, wifi.o(i.wifi_Module_Hardware_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wifi_Module_Hardware_Reset &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Init
</UL>

<P><STRONG><a name="[9a]"></a>wifi_SendData</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, wifi.o(i.wifi_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = wifi_SendData &rArr; M8266WIFI_SPI_Send_Data &rArr; M8266WIFI_SPI_sdfal &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_firmware_upgrade
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vci_ctl_recv
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_cmd_recv
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_msg_send2wifi
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>wifi_SetupTCPServer</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, wifi.o(i.wifi_SetupTCPServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = wifi_SetupTCPServer &rArr; M8266WIFI_SPI_Setup_Connection &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Config_Tcp_Window_num
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>wifi_disableIT</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wifi.o(i.wifi_disableIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wifi_disableIT
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_firmware_upgrade
</UL>

<P><STRONG><a name="[bf]"></a>wifi_enableIT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wifi.o(i.wifi_enableIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wifi_enableIT &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_firmware_upgrade
</UL>

<P><STRONG><a name="[e5]"></a>wifi_init_it</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, wifi.o(i.wifi_init_it))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wifi_init_it &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exti_source_select
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_disable
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Init
</UL>

<P><STRONG><a name="[d3]"></a>wifi_reset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wifi.o(i.wifi_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wifi_reset &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e3]"></a>wifi_spi_init</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, wifi.o(i.wifi_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = wifi_spi_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_deinit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[e6]"></a>IntToHex</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wifi.o(i.IntToHex))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Init
</UL>

<P><STRONG><a name="[dd]"></a>system_clock_120m_hxtal</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, system_gd32c10x.o(i.system_clock_120m_hxtal))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[81]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32c10x.o(i.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_120m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[ae]"></a>dev_can_baudrate_set</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, gd32c10x_can.o(i.dev_can_baudrate_set))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_frequency_set
</UL>

<P><STRONG><a name="[ad]"></a>dev_can_fd_baudrate_set</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, gd32c10x_can.o(i.dev_can_fd_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dev_can_fd_baudrate_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_fd_frequency_set
</UL>

<P><STRONG><a name="[c5]"></a>fmc_ready_wait</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gd32c10x_fmc.o(i.fmc_ready_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
</UL>

<P><STRONG><a name="[c6]"></a>fmc_state_get</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, gd32c10x_fmc.o(i.fmc_state_get))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>

<P><STRONG><a name="[4f]"></a>M8266WIFI_SPI_ffwsbza</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_ffwsbza &rArr; M8266HostIf_Set_SPI_nCS_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Set_SPI_nCS_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Config_AP
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Has_DataReceived
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Get_HostIP_by_HostName
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Interface_Communication_Stress_Test
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_dlodc
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_xhjrlbedv.isra.16.constprop.36
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ctpsp
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_capstp
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_qacal
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_skbldxsjxe
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvdnstap
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_gbcwzsrf.constprop.38
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_twsfad
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_szbcxstf
</UL>

<P><STRONG><a name="[51]"></a>M8266WIFI_SPI_hjdxctmm</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_hjdxctmm &rArr; M8266HostIf_Set_SPI_nCS_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Set_SPI_nCS_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Interface_Communication_Stress_Test
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_xhjrlbedv.isra.16.constprop.36
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_gbcwzsrf.constprop.38
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_szbcxstf
</UL>

<P><STRONG><a name="[52]"></a>M8266WIFI_SPI_szbcxstf</STRONG> (Thumb, 156 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_szbcxstf &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_hjdxctmm
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ffwsbza
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Set_Opmode
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Query_Connection
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Opmode
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Config_AP
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Module_Info
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_StartModuleSmartConfig
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Get_HostIP_by_HostName
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_dlodc
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_xhjrlbedv.isra.16.constprop.36
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ctpsp
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_capstp
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_qacal
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sptdt
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssmd
</UL>

<P><STRONG><a name="[54]"></a>M8266WIFI_SPI_ssut</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_ssut &rArr; M8266HostIf_Set_SPI_nCS_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Set_SPI_nCS_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_skbldxsjxe
</UL>

<P><STRONG><a name="[55]"></a>M8266WIFI_SPI_wscbf</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_wscbf &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ffwsbza
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Set_Opmode
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Query_Connection
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Opmode
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Config_AP
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Module_Info
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_StartModuleSmartConfig
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Get_HostIP_by_HostName
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_dlodc
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ctpsp
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_capstp
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_qacal
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sptdt
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssmd
</UL>

<P><STRONG><a name="[56]"></a>M8266WIFI_SPI_twsfad</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_twsfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ffwsbza
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_skbldxsjxe
</UL>

<P><STRONG><a name="[57]"></a>M8266WIFI_SPI_pirouaw</STRONG> (Thumb, 180 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_pirouaw &rArr; M8266HostIf_Set_SPI_nCS_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Set_SPI_nCS_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_xhjrlbedv.isra.16.constprop.36
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_skbldxsjxe
</UL>

<P><STRONG><a name="[58]"></a>M8266WIFI_SPI_gbcwzsrf.constprop.38</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_gbcwzsrf.constprop.38 &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_hjdxctmm
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ffwsbza
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Set_Opmode
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Query_Connection
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Opmode
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Config_AP
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Module_Info
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_StartModuleSmartConfig
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Get_HostIP_by_HostName
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_dlodc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_xhjrlbedv.isra.16.constprop.36
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ctpsp
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_capstp
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_qacal
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sptdt
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssmd
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_skbldxsjxe
</UL>

<P><STRONG><a name="[5a]"></a>fvcp.constprop.39</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F2xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_Select
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_xhjrlbedv.isra.16.constprop.36
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvdnstap
</UL>

<P><STRONG><a name="[59]"></a>fvdnstap</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = fvdnstap &rArr; M8266WIFI_SPI_ffwsbza &rArr; M8266HostIf_Set_SPI_nCS_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvcp.constprop.39
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ffwsbza
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Config_AP
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Send_Data_to_TcpClient
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Send_Udp_Data
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Get_HostIP_by_HostName
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Interface_Communication_Stress_Test
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ctpsp
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_capstp
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_skbldxsjxe
</UL>

<P><STRONG><a name="[5b]"></a>M8266WIFI_SPI_skbldxsjxe</STRONG> (Thumb, 386 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_skbldxsjxe &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvdnstap
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_gbcwzsrf.constprop.38
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_pirouaw
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_twsfad
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssut
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ffwsbza
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Set_Opmode
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Query_Connection
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Opmode
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Config_AP
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Module_Info
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_StartModuleSmartConfig
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Get_HostIP_by_HostName
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_dlodc
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_xhjrlbedv.isra.16.constprop.36
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ctpsp
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_capstp
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_qacal
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sptdt
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssmd
</UL>

<P><STRONG><a name="[5c]"></a>M8266WIFI_SPI_ssmd</STRONG> (Thumb, 164 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_ssmd &rArr; M8266WIFI_SPI_skbldxsjxe &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_skbldxsjxe
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_gbcwzsrf.constprop.38
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_szbcxstf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_Select
</UL>

<P><STRONG><a name="[6c]"></a>M8266WIFI_SPI_sptdt</STRONG> (Thumb, 252 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F2xx.o(.text.9))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_sptdt &rArr; M8266WIFI_SPI_skbldxsjxe &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_skbldxsjxe
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_gbcwzsrf.constprop.38
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_szbcxstf
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Get_HostIP_by_HostName
</UL>

<P><STRONG><a name="[65]"></a>M8266WIFI_SPI_qacal</STRONG> (Thumb, 274 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F2xx.o(.text.12))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_qacal &rArr; M8266WIFI_SPI_skbldxsjxe &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_skbldxsjxe
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_gbcwzsrf.constprop.38
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_szbcxstf
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ffwsbza
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_dlodc
</UL>

<P><STRONG><a name="[6b]"></a>M8266WIFI_SPI_capstp</STRONG> (Thumb, 252 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F2xx.o(.text.5))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_capstp &rArr; M8266WIFI_SPI_skbldxsjxe &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_skbldxsjxe
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvdnstap
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_gbcwzsrf.constprop.38
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_szbcxstf
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ffwsbza
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Config_AP
</UL>

<P><STRONG><a name="[68]"></a>M8266WIFI_SPI_ctpsp</STRONG> (Thumb, 208 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F2xx.o(.text.15))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_ctpsp &rArr; M8266WIFI_SPI_skbldxsjxe &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_skbldxsjxe
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvdnstap
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_gbcwzsrf.constprop.38
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_szbcxstf
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ffwsbza
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Config_Tcp_Window_num
</UL>

<P><STRONG><a name="[69]"></a>M8266WIFI_SPI_xhjrlbedv.isra.16.constprop.36</STRONG> (Thumb, 656 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F2xx.o(.text.4))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_xhjrlbedv.isra.16.constprop.36 &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Has_DataReceived
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_skbldxsjxe
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvcp.constprop.39
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_gbcwzsrf.constprop.38
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_pirouaw
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_szbcxstf
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_hjdxctmm
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ffwsbza
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_RecvData
</UL>

<P><STRONG><a name="[5f]"></a>M8266WIFI_SPI_sdfal</STRONG> (Thumb, 788 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F2xx.o(.text.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_sdfal &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Get_HostIP_by_HostName
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_skbldxsjxe
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvcp.constprop.39
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_twsfad
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssut
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_szbcxstf
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_hjdxctmm
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ffwsbza
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Send_Data
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Send_Data_to_TcpClient
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Send_Udp_Data
</UL>

<P><STRONG><a name="[66]"></a>M8266WIFI_SPI_dlodc</STRONG> (Thumb, 364 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F2xx.o(.text.13))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_dlodc &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Query_Connection
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_qacal
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_skbldxsjxe
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_gbcwzsrf.constprop.38
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_szbcxstf
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ffwsbza
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Delete_Connection
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
